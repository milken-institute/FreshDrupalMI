<?php

/**
 * @file
 * Contains milken_migrate.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\migrate\Row;
use Drupal\migrate\Plugin\MigrateSourceInterface;
use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\media\Entity\Media;
use GuzzleHttp\Exception\RequestException;
use Drupal\Component\Serialization\Json;
use Drupal\milken_migrate\Controller\MilkenMigrateController;

/**
 * Implements hook_help().
 */
function milken_migrate_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the milken_migrate module.
    case 'help.page.milken_migrate':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Migration classes and data for move to re-organized d8 site') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_migrate_prepare_row().
 */
function milken_migrate_migrate_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {

}

/**
 * Add log function.
 */
function _log_migrate_debug_info($message) {
  if (function_exists('drush_print')) {
    drush_print($message);
  }
  else {
    \Drupal::logger('migrate_jsonapi')->info($message);
  }
}

/**
 * Implements hook_cron().
 */
function milken_migrate_cron() {
  module_load_include('inc', 'milken_migrate', "milken_migrate.cron");
  return milken_migrate_cron_run_migrations();
}

/**
 * Custom function to pull thumbnails from oEmbed service.
 */
function milken_migrate_update_video() {

  $result = \Drupal::entityQuery("media")
    ->condition('bundle', 'video')
    // ->condition('uid', 1, '<>')
    ->execute();
  $i = 0;

  foreach ($result as $id) {
    $valid = FALSE;
    $video = Media::load($id);
    $url = $video->get('field_media_oembed_video')->getValue();
    $pos = strpos($url[0]['value'], 'https://www.youtube.com/embed/');
    $uri = 'na';
    if ($pos === FALSE) {

    }
    else {
      $uri = str_replace("https://www.youtube.com/embed/", "https://www.youtube.com/watch?v=", $url[0]['value']);

      try {
        $client = \Drupal::httpClient();
        $request = $client->get('https://www.youtube.com/oembed?url=' . $uri);
        list($format) = $request->getHeader('Content-Type');
        $content = (string) $request->getBody();
        if (strstr($format, 'text/xml') || strstr($format, 'application/xml')) {
          if (!$this->parseResourceXml($content, $uri)) {
            $valid = FALSE;
          }
          else {
            $valid = TRUE;
          }
        }
        elseif (strstr($format, 'text/javascript') || strstr($format, 'application/json')) {
          if (!Json::decode($content)) {
            $valid = FALSE;
          }
          else {
            $valid = TRUE;
          }
        }
        // If the response is neither XML nor JSON, we are in bat country.
        else {
          echo 'The fetched resource did not have a valid Content-Type header.';
          $valid = FALSE;
        }
      }
      catch (RequestException $e) {
        echo 'Could not retrieve the oEmbed resource.';
      }
      $video->set('field_media_oembed_video', $uri);
    }

    $video->set('uid', 1);
    if ($valid) {
      $video->save();
    }
    else {
      echo $id;
      echo " ";
      echo $url[0]['value'];
      echo "\n";
    }

    $i++;
    // }
  }
  echo $i;
}

/**
 * Custom function to bulk tag Articles, Reports and Videos.
 */
function milken_migrate_content_update() {
  $csv_source = drupal_get_path('module', 'milken_migrate') . '/assets/bulk-tagging.csv';

  $num_lines = (int) `wc -l $csv_source`;
  print 'Total Records to Update: ' . $num_lines;
  $current_line = 0;
  $migrate = new MilkenMigrateController();
  if (($fp = fopen($csv_source, "r")) !== FALSE) {
    while (($data = fgetcsv($fp, NULL, ",", "|",)) !== FALSE){
      $current_line++;
      print "\n";
      print 'Current record: ' . $current_line;
      if (strcasecmp($data[0], 'Article') == 0) {
        // Update Articles
        print ', type: Article';
        $result = $migrate->update_articles($data);
      } else if(strcasecmp($data[0], 'Video') == 0) {
        // Update Videos
        print ', type: Video';
        $result = $migrate->update_media($data);
      } else if(strcasecmp($data[0], 'Report') == 0) {
        // Update Reports
        print ', type: Report'; 
        $result = $migrate->update_media($data);
      } else {
        //skip
      }
    }
  }
    
}

/**
 * Custom function to link Speakers to Panel_Speaker records.
 */
function milken_migrate_update_grid_join_panel_speaker() {

  
  $results = \Drupal::entityTypeManager()->getStorage('grid_join_panel_speaker')->loadByProperties(['type' => 'join_table']);
  $i = 0;
  // print_r($results);
  foreach ($results as $key => $item) {
    
  // $panel_record = \Drupal::entityTypeManager()->getStorage('panel')->load(653);
  // $panel_record_event_value = $panel_record->get('field_event')->getValue();
  // $panel_record_event_value_target_id = $panel_record_event_value[0]['target_id'];
  // print($panel_record_event_value_target_id);

    print('Current Panel_Speakers Record: ' . $key . '; ');

    // Get value of grid_join_panel_speaker.field_panel_id
    $field_panel_id_value = $item->get('field_panel_id')->getValue()[0]['value'];

    if($field_panel_id_value == null) {
      print('NULL ITEM FOUND field_panel_id_value in ' . $key);
      continue;
    }
    
    // Load the Panel by ID 
    print('field_panel_id_value: ' . $field_panel_id_value . '; ');
    $panel_record = \Drupal::entityTypeManager()->getStorage('panel')->load((int)$field_panel_id_value);
    // $panel_record = \Drupal::entityTypeManager()->getStorage('panel')->loadByProperties(['type' => 'panel', 'id' => $field_panel_id_value]);

    if($panel_record == null) {
      print('NULL ITEM FOUND panel_record in ' . $key);
      continue;
    }

    // Get event_id from Panel
    print('panel_record: ' . gettype($panel_record) . '; '); 
    $event_id = $panel_record->get('field_event')->getValue()[0]['target_id'];
    print('event_id: ' . $event_id . '; ');

    // Load current Panel_Speakers entity
    $grid_join_panel_speaker_rw = \Drupal::entityTypeManager()->getStorage('grid_join_panel_speaker')->load($key);
    $grid_join_panel_speaker_rw->set('field_event', ['target_id' => $event_id]);
    $grid_join_panel_speaker_rw->save();
    print('panel_speaker_id: ' . $key . ' event_id: ' . $event_id . "; \n");
  }
}

/**
 * Custom function to link Speaker records to a Panel.
 */
function milken_migrate_update_grid_panel() {

  
  // Get all Panel records
  $panels = \Drupal::entityTypeManager()->getStorage('panel')->loadByProperties(['type' => 'panel']);
  $i = 0;

  foreach ($panels as $key => $item) {
    
    $array_speaker_ids = [];

    print('Current Panel Record: ' . $key . "\n");

    // Get Panel_Speaker Records by Panel ID
    $array_panel_speakers = \Drupal::entityTypeManager()->getStorage('grid_join_panel_speaker')->loadByProperties(['type' => 'join_table','field_panel_id' => $key]);
    if($array_panel_speakers == null) {
      print('NULL returned getting Panel_Speaker records by Panel ID: ' . $key);
      continue;
    } else {
      foreach($array_panel_speakers as $panel_speaker_key => $panel_speaker_value){
        // Get and loop grid_join_panel_speaker.field_speaker_id
        $panel_speaker_field_speaker_id_values = $panel_speaker_value->get('field_speaker_id')->getValue();
        if($panel_speaker_field_speaker_id_values == null) {
          print('NULL returned by field_speaker_id in Panel ID: ' . $key);
          continue;
        } else {
          foreach ($panel_speaker_field_speaker_id_values as $speaker_key => $speaker_value){
            array_push($array_speaker_ids, ['target_id' => $speaker_value['value']]);
          }
        }
      }
    }
    
    // Load the Panel by ID and check if null
    $panel_record_rw = \Drupal::entityTypeManager()->getStorage('panel')->load((int)$key);
    if($panel_record_rw == null) {
      print('NULL returned when loading Panel by ID: ' . $key);
      continue;
    }

    // Save updated Panel record
    $panel_record_rw->set('field_speakers', $array_speaker_ids);
    $panel_record_rw->save();
    print_r($array_speaker_ids);
    print('End of Loop Iteration, Panel ID: ' . $key . "; \n");
    // Thank you come again
  }
}
