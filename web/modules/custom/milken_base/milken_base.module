<?php

/**
 * @file
 * Contains milken_base.module.
 */

use Drupal\Core\Entity\ContentEntityTypeInterface;
use Drupal\Core\Config\Entity\ConfigEntityType;

/**
 * Implements hook_entity_type_alter().
 */
function milken_base_entity_type_alter(array &$entity_types) {
  if ($entity_types['media_type'] instanceof ConfigEntityType) {
    $entity_types['media_type']->setHandlerClass('access', 'Drupal\milken_base\AccessControlHandler\OverrideMediaTypeAccessControlHandler');
  }
  if ($entity_types['event_type'] instanceof ConfigEntityType) {
    $entity_types['event_type']->setHandlerClass('access', 'Drupal\milken_base\AccessControlHandler\OverrideEventTypeAccessControlHandler');
  }
  if ($entity_types['node_type'] instanceof ConfigEntityType) {
    $entity_types['node_type']->setHandlerClass('access', 'Drupal\milken_base\AccessControlHandler\OverrideNodeTypeAccessControlHandler');
  }
  if ($entity_types['slide_type'] instanceof ConfigEntityType) {
    $entity_types['slide_type']->setHandlerClass('access', 'Drupal\milken_base\AccessControlHandler\OverrideSlideTypeAccessControlHandler');
  }
  if ($entity_types['menu'] instanceof ConfigEntityType) {
    $entity_types['menu']->setHandlerClass('access', 'Drupal\milken_base\AccessControlHandler\OverrideMenuAccessControlHandler');
  }
  if ($entity_types['menu_link_content'] instanceof ContentEntityTypeInterface) {
    $entity_types['menu_link_content']->setHandlerClass('access', 'Drupal\milken_base\AccessControlHandler\OverrideMenuLinkContentControlHandler');
  }
}

/**
 * To add a CSS library to the admin theme.
 */
function milken_base_page_attachments(array &$attachments) {
  $config = \Drupal::config('system.theme');
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  if ($theme == $config->get('admin')) {
    $attachments['#attached']['library'][] = 'milken_base/extra.admin';
  }
}

/**
 * Implements hook_search_api_solr_query_alter().
 */
function search_api_custom_search_api_solr_query_alter(\Solarium\Core\Query\QueryInterface $solarium_query, \Drupal\search_api\Query\QueryInterface $query) {
  // To get a list of solrium events:
  // @see http://solarium.readthedocs.io/en/stable/customizing-solarium/#plugin-system
  // $solr_field_names maps search_api field names to real field names in
  // the Solr index.
  $solr_field_names = $query->getIndex()->getServerInstance()->getBackend()->getSolrFieldNames($query->getIndex());
  \Drupal::logger('milken_migrate')->debug('SOLR Field Names: ' . \Kint::dump($solr_field_names, TRUE));

  $solr_date_field = !empty($fields['created']) ? $fields['created'] : '';

  if ($solr_field) {
    $solarium_query->addParam('bf', "recip(abs(ms(NOW/HOUR,{$solr_date_field})),3.16e-11,1,.4)^21");
  }

  // Boost documents by date.
  // @see https://www.drupal.org/project/search_api_solr/issues/2855329
  // $boost_functions = 'recip(abs(ms(NOW/HOUR,' . $solr_field_names['created'] . ')),3.16e-11,1,.4)^25';
  // $edismax->setBoostFunctions($boost_functions);

}